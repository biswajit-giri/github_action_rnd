name: Release Branch Creation
permissions:
  id-token: write # required for requesting JWT
  contents: read
  security-events: write
on:
  workflow_call:
    secrets:
      DEVOPS_WORKFLOW_TOKEN:
        required: true
jobs:
  create-release_branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout selected repository
        uses: actions/checkout@v4
        with:
          ref: develop
          token: ${{ secrets.DEVOPS_WORKFLOW_TOKEN }}
      - name: Fetch all branches
        run: git fetch all

      - name: Get latest release branch
        run: |
          LATEST_BRANCH = $(git branch -r --list 'origin/release.*' | sed 's/origin\/release.//g' | sort -rV | head -n 1)
          if [[-z "$LATEST_BRANCH" ]]; then
            echo "No release beanches found, starting from release.1.0.0"
            echo "branch=1.0.0" >> $GUTHUB_ENV
          else
            echo "Latest-release branch is $LAETST_BRANCH"
            echo "branch=$LATEST_BRANCH" >> $GUTHUB_ENV
      - name: calculate next version
        run: |
          #Trim spaces and ensure the version is read as a string
          CURRENT_VERSION=$(echo "${{ env.branch }}" | xargs)
          echo "Current branch value: '$CURRENT_VERSION'"
          IFS='.' read -r -a vers <<< "$CURRENT_VERSION"
          echo "Parshed version numbers: MAJOR='${vers[0]}', MINOR='${vers[1]}', PATCH='${vers[2]}'"

          #ENSURE VARIABLES ARE TREATED AS NUMBERS AND PROVIDE DEFAULTS
          PATCH="${vers[2]:-0}"
          MINOR="${vers[1]:-0}"
          MAJOR="${vers[0]:-0}"

          echo "Before incrementing: MAJOR='$MAJOR', MINOR='$MINOR', PATCH='$PATCH'"

          #safely increment the version
          PATCH=$((PATCH + 1))
          if [[ $PATCH -gt 99 ]]; then
            PATCH=0
            MINOR=$((MINOR + 1))
            if [[ $MINOR -gt 99 ]]; then
              MINOR=0
              MAJOR=$((MAJOR + 1))
            fi
          fi

          echo "after incrementing: MAJOR='$MAJOR', MINOR='$MINOR', PATCH='$PATCH'"

          # ensure it does not exceed 99.99.99
          MAJOR = $((MAJOR > 99 ? 99 : MAJOR))
          MINOR = $((MINOR > 99 ? 99 : MINOR))
          PATCH = $((PATCH > 99 ? 99 : PATCH))

          echo "AFTER CAPPING: MAJOR='$MAJOR', MINOR='$MINOR', PATCH='$PATCH'"


          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: '$NEW_VERSION'"
          echo "version=$NEW_VERSION" >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}
        env:
          branch: ${{env.branch}}

      - name: create new release branch
        run: |
          set -x
          NEW_BRANCH_NAME = "release.${{env.version}}"
          git config --global user.email "action.github.com"
          git config --global user.name "Github Action"
          git checkout -b $NEW_BRANCH_NAME
          GIT_CURL_VERBOSE=1 git push origin $NEW_BRANCH_NAME
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
