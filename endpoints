from fastapi import FastAPI, HTTPException
import requests
from pydantic import BaseModel

app = FastAPI()

# Data model for POST request body
class Item(BaseModel):
    name: str
    description: str
    price: float

# In-memory "database"
items_db = {}

# GET Endpoint 1: Retrieve all items
@app.get("/items")
async def get_items():
    return items_db

# GET Endpoint 2: Retrieve a specific item by name
@app.get("/items/{item_name}")
async def get_item(item_name: str):
    item = items_db.get(item_name)
    if item is None:
        raise HTTPException(status_code=404, detail="Item not found")
    return item

# POST Endpoint 1: Add a new item
@app.post("/items")
async def create_item(item: Item):
    if item.name in items_db:
        raise HTTPException(status_code=400, detail="Item already exists")
    items_db[item.name] = item
    return item

# POST Endpoint 2: Update an item
@app.post("/items/{item_name}")
async def update_item(item_name: str, item: Item):
    if item_name not in items_db:
        raise HTTPException(status_code=404, detail="Item not found")
    items_db[item_name] = item
    return item

# Endpoint to call an external URL
@app.get("/external-data")
async def get_external_data():
    url = "https://api.github.com"  # Example external API (GitHub)
    response = requests.get(url)
    if response.status_code != 200:
        raise HTTPException(status_code=response.status_code, detail="Failed to retrieve external data")
    return response.json()

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)
